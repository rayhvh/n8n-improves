stages:
  - test
  - build
  - deploy

variables:
  DOCKER_IMAGE_NAME: 'n8n-patched'
  DOCKER_REGISTRY: '${CI_REGISTRY}'
  IMAGE_TAG: '${CI_COMMIT_SHORT_SHA}'
  LATEST_TAG: 'latest'

# Test the patch before building
test-patch:
  stage: test
  image: node:20-alpine
  before_script:
    - apk add --no-cache git
    - npm install -g pnpm@10.2.1
  script:
    - echo "🧪 Testing executor role patch..."
    - pnpm install --frozen-lockfile
    - pnpm build
    - pnpm test --filter=@n8n/permissions
  rules:
    - if: $CI_COMMIT_BRANCH == "feat/add-project-executor-role"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  artifacts:
    reports:
      junit: test-results.xml
    expire_in: 1 week

# Build Docker image with patch applied
build-patched-image:
  stage: build
  image: docker:27
  services:
    - docker:27-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: '/certs'
  before_script:
    - echo "🔐 Logging into GitLab Container Registry..."
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo "🏗️ Building patched n8n Docker image..."
    - >
      docker build
      --build-arg N8N_VERSION=master
      --file Dockerfile.local
      --tag $CI_REGISTRY_IMAGE/$DOCKER_IMAGE_NAME:$IMAGE_TAG
      --tag $CI_REGISTRY_IMAGE/$DOCKER_IMAGE_NAME:$LATEST_TAG
      .
    - echo "📤 Pushing images to registry..."
    - docker push $CI_REGISTRY_IMAGE/$DOCKER_IMAGE_NAME:$IMAGE_TAG
    - docker push $CI_REGISTRY_IMAGE/$DOCKER_IMAGE_NAME:$LATEST_TAG
  rules:
    - if: $CI_COMMIT_BRANCH == "feat/add-project-executor-role"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  dependencies:
    - test-patch

# Package and publish Helm chart
publish-helm-chart:
  stage: build
  image: alpine/helm:latest
  before_script:
    - helm repo add stable https://charts.helm.sh/stable
    - echo $CI_REGISTRY_PASSWORD | helm registry login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo "📦 Packaging Helm chart..."
    - cd k8s
    - helm dependency update n8n-patched
    - helm package n8n-patched
    - echo "📤 Publishing Helm chart to registry..."
    - helm push n8n-patched-*.tgz oci://$CI_REGISTRY_IMAGE/charts
  rules:
    - if: $CI_COMMIT_BRANCH == "feat/add-project-executor-role"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  dependencies:
    - test-patch

# Deploy to staging environment via ArgoCD
argocd-sync-staging:
  stage: deploy
  image: argoproj/argocd:latest
  before_script:
    - argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure
  script:
    - echo "🚀 Syncing ArgoCD application for staging..."
    - argocd app sync n8n-patched-staging --force
    - argocd app wait n8n-patched-staging --health
  environment:
    name: staging
    url: https://$STAGING_HOST:5678
  rules:
    - if: $CI_COMMIT_BRANCH == "feat/add-project-executor-role"
      when: manual
  dependencies:
    - build-patched-image
    - publish-helm-chart

# Deploy to production environment via ArgoCD
argocd-sync-production:
  stage: deploy
  image: argoproj/argocd:latest
  before_script:
    - argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure
  script:
    - echo "🚀 Syncing ArgoCD application for production..."
    - argocd app sync n8n-patched-production --force
    - argocd app wait n8n-patched-production --health
  environment:
    name: production
    url: https://$PRODUCTION_HOST:5678
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
  dependencies:
    - build-patched-image
    - publish-helm-chart

# Scheduled job to update patch with latest n8n
update-patch:
  stage: build
  image: alpine/git:latest
  before_script:
    - apk add --no-cache bash
    - git config --global user.email "$GITLAB_USER_EMAIL"
    - git config --global user.name "$GITLAB_USER_NAME"
  script:
    - chmod +x scripts/update-and-patch.sh
    - ./scripts/update-and-patch.sh
    - |
      if git diff --quiet; then
        echo "✅ No updates needed - patch is current"
      else
        echo "📤 Pushing updated patch..."
        git push origin feat/add-project-executor-role
      fi
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
